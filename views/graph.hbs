<canvas id="myChart"></canvas>

<script>let series = {{{ json series }}}</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
<script src="/javascripts/printChartjs.js"></script>

<script>
  window.onload = function () {

    var dataPoints = [];

    dataPoints = series.map((elem) => {
      let ts = new Date(elem[0]);

      //0 - timestamp, 1 - Open, 2 - High, 3 - Low, 4 - Close, 5 - Volume
      return { x: ts, y: [elem[1], elem[2], elem[3], elem[4]] };
    });

    var chart = new CanvasJS.Chart("chartContainer", {
      animationEnabled: true,
      theme: "light2", // "light1", "light2", "dark1", "dark2"
      exportEnabled: true,
      title: {
        text: "BTC/USDT on Bitfinex"
      },
      axisX: {
        valueFormatString: "DD HH:mm"
      },
      axisY: {
        includeZero: false,
        prefix: "$",
        title: "Price (in USD)"
      },
      toolTip: {
        shared: true
      },
      legend: {
        cursor: "pointer",
        itemclick: toogleDataSeries
      },
      data: [{
        type: "candlestick",
        showInLegend: true,
        name: "BTC",
        yValueFormatString: "$###0.00",
        xValueFormatString: "MMM DD HH:mm",
        dataPoints: dataPoints
      },
      ]
    });
////////////////////////////
    //This part is for refreshing and could be replaced by a simple chart.render() for a static chart.

    let refreshIntID = setInterval(function () {
      console.log('entra tb');
      axios.get('/seriesQuery')
        .then((newSeries) => {

          newDataPoints = newSeries.map((elem) => {
            let ts = new Date(elem[0]);

            //0 - timestamp, 1 - Open, 2 - High, 3 - Low, 4 - Close, 5 - Volume
            return { x: ts, y: [elem[1], elem[2], elem[3], elem[4]] };
          });

          chart.data.datapoints = newDataPoints;
          chart.render();
        })
        .catch((err) => {
          return err
        })

    }, 10000);

    setTimeout(function () {
      clearInterval(refreshIntID)
    }, 60000);
////////////////////////////
    function toogleDataSeries(e) {
      if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
        e.dataSeries.visible = false;
      } else {
        e.dataSeries.visible = true;
      }
      e.chart.render();
    }

  }
</script>


<div id="chartContainer" style="height: 300px; width: 100%;"></div>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>